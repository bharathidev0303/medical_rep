import { useEffect, useRef } from "react";
import { View, Text, TouchableOpacity, StyleSheet, Pressable, Animated } from "react-native"
import Svg, { Path } from 'react-native-svg';

export const BottomTabbar = ({ state, descriptors, navigation }: any): JSX.Element => {

    let Menus = [
        {
            name: 'Dashboard', key: 'Dashboard', active:
                <Svg width="20" height="20" viewBox="0 0 20 20" fill="none" >
                    <Path d="M15.7913 0H4.20873C1.88765 0 0 1.88762 0 4.20873V15.7913C0 18.1112 1.88762 20 4.20873 20H15.7913C18.1112 20 20 18.1112 20 15.7913V4.20873C20 1.88765 18.1124 0 15.7913 0ZM4.20873 1.65138H15.7913C17.2018 1.65138 18.3486 2.79815 18.3486 4.2087V7.04473L1.65135 7.04358V4.20873C1.65135 2.79818 2.79818 1.65138 4.20873 1.65138ZM1.65141 15.7913V8.69725H6.63548V18.3486H4.20888C2.79833 18.3486 1.65141 17.2018 1.65141 15.7913ZM15.7913 18.3486H8.28568V8.69604H18.3487V15.7901C18.3487 17.2018 17.2018 18.3486 15.7913 18.3486Z" fill="#868686" />
                </Svg>,
            icon: <Svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                <Path
                    d="M15.7913 0H4.20873C1.88765 0 0 1.88762 0 4.20873V15.7913C0 18.1112 1.88762 20 4.20873 20H15.7913C18.1112 20 20 18.1112 20 15.7913V4.20873C20 1.88765 18.1124 0 15.7913 0ZM4.20873 1.65138H15.7913C17.2018 1.65138 18.3486 2.79815 18.3486 4.2087V7.04473L1.65135 7.04358V4.20873C1.65135 2.79818 2.79818 1.65138 4.20873 1.65138ZM1.65141 15.7913V8.69725H6.63548V18.3486H4.20888C2.79833 18.3486 1.65141 17.2018 1.65141 15.7913ZM15.7913 18.3486H8.28568V8.69604H18.3487V15.7901C18.3487 17.2018 17.2018 18.3486 15.7913 18.3486Z"
                    fill="#1439BB"
                />
            </Svg>
        },
        {
            name: 'Upload Order', key: 'Upload', active: <Svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                <Path d="M19 12C18.4477 12 18 12.4477 18 13V18H2V13C2 12.4477 1.55234 12 1 12C0.44766 12 0 12.4477 0 13V18C0 19.1047 0.89532 20 2 20H18C19.1047 20 20 19.1047 20 18V13C20 12.4477 19.5523 12 19 12Z" fill="#868686" />
                <Path d="M14.95 4.95L9.99998 0L5.05078 4.9492C4.66016 5.33982 4.66016 5.97264 5.05078 6.36326C5.4414 6.75388 6.07422 6.75388 6.46484 6.36326L9.00004 3.82806V12.9999C9.00004 13.5522 9.4477 13.9999 10 13.9999C10.5524 13.9999 11 13.5522 11 12.9999V3.82806L13.536 6.36326C13.9267 6.75388 14.5595 6.75388 14.9501 6.36326C15.3407 5.97264 15.3407 5.33982 14.9501 4.9492L14.95 4.95Z" fill="#868686" />
            </Svg>, icon: <Svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                <Path d="M19 12C18.4477 12 18 12.4477 18 13V18H2V13C2 12.4477 1.55234 12 1 12C0.44766 12 0 12.4477 0 13V18C0 19.1047 0.89532 20 2 20H18C19.1047 20 20 19.1047 20 18V13C20 12.4477 19.5523 12 19 12Z" fill="#1439BB" />
                <Path d="M14.95 4.95L9.99998 0L5.05078 4.9492C4.66016 5.33982 4.66016 5.97264 5.05078 6.36326C5.4414 6.75388 6.07422 6.75388 6.46484 6.36326L9.00004 3.82806V12.9999C9.00004 13.5522 9.4477 13.9999 10 13.9999C10.5524 13.9999 11 13.5522 11 12.9999V3.82806L13.536 6.36326C13.9267 6.75388 14.5595 6.75388 14.9501 6.36326C15.3407 5.97264 15.3407 5.33982 14.9501 4.9492L14.95 4.95Z" fill="#1439BB" />
            </Svg>
        },
        {
            name: 'Order History', key: 'History',

            active: <Svg width="21" height="20" viewBox="0 0 21 20" fill="none">
                <Path fillRule="evenodd" d="M10.9675 0C7.03521 0 3.51988 2.28485 1.88631 5.73511L1.50943 4.50304C1.48044 4.40593 1.43248 4.31549 1.36831 4.23691C1.30415 4.15833 1.22504 4.09315 1.13553 4.04513C1.04602 3.9971 0.947879 3.96717 0.846733 3.95705C0.745587 3.94694 0.643433 3.95683 0.546135 3.98617C0.350467 4.04581 0.186563 4.18044 0.0904514 4.36048C-0.00566034 4.54052 -0.0261148 4.75122 0.0335841 4.94629L0.978792 8.04598C1.03755 8.23701 1.16858 8.39777 1.34414 8.49424C1.5197 8.5907 1.72604 8.6153 1.91948 8.56284L4.96766 7.73346C5.0658 7.70686 5.15769 7.66119 5.23807 7.59908C5.31844 7.53697 5.38571 7.45964 5.436 7.37154C5.48629 7.28344 5.51862 7.18629 5.53112 7.0857C5.54362 6.9851 5.53605 6.88304 5.50885 6.78536C5.4549 6.58882 5.32492 6.42164 5.14743 6.32051C4.96994 6.21938 4.75944 6.19257 4.56214 6.24596L3.17825 6.6246C4.50873 3.5706 7.54452 1.53858 10.9675 1.53858C15.6676 1.53858 19.4563 5.31664 19.4563 9.99925C19.4563 14.6819 15.6676 18.4614 10.9675 18.4614C7.11303 18.4614 3.74602 15.8863 2.75614 12.1749C2.73006 12.0772 2.68492 11.9856 2.62329 11.9053C2.56166 11.825 2.48475 11.7576 2.39696 11.7069C2.30918 11.6563 2.21224 11.6233 2.11168 11.6101C2.01113 11.5968 1.90893 11.6034 1.81093 11.6295C1.61396 11.682 1.44585 11.8101 1.34332 11.9858C1.24079 12.1615 1.21217 12.3704 1.26371 12.567C2.4315 16.9456 6.4209 20 10.9675 20C16.5016 20 21 15.5136 21 9.99925C21 4.48487 16.5016 2.90755e-06 10.9675 0ZM10.4595 4.82608C10.2558 4.82688 10.0608 4.90786 9.91674 5.0514C9.77273 5.19493 9.69147 5.38938 9.69068 5.59237V11.2599C9.69015 11.3957 9.72572 11.5293 9.79377 11.647C9.86182 11.7647 9.95992 11.8623 10.0781 11.93L13.6961 13.9809C13.7844 14.031 13.8817 14.0632 13.9825 14.0757C14.0832 14.0883 14.1855 14.0808 14.2834 14.0539C14.3813 14.027 14.4729 13.981 14.5529 13.9187C14.633 13.8565 14.6999 13.779 14.7499 13.6909C14.8001 13.603 14.8324 13.506 14.845 13.4055C14.8576 13.3051 14.8501 13.2032 14.8231 13.1056C14.7961 13.008 14.75 12.9167 14.6875 12.837C14.625 12.7572 14.5473 12.6905 14.4589 12.6407L11.2344 10.8121V5.59237C11.234 5.49134 11.2136 5.39138 11.1745 5.2982C11.1353 5.20502 11.0781 5.12043 11.0062 5.04928C10.9342 4.97812 10.8489 4.92179 10.7551 4.88349C10.6613 4.8452 10.5609 4.82569 10.4595 4.82608Z" fill="#868686" />
            </Svg>,
            icon: <Svg width="21" height="20" viewBox="0 0 21 20" fill="none" >
                <Path fillRule="evenodd" d="M10.9675 0C7.03521 0 3.51988 2.28485 1.88631 5.73511L1.50943 4.50304C1.48044 4.40593 1.43248 4.31549 1.36831 4.23691C1.30415 4.15833 1.22504 4.09315 1.13553 4.04513C1.04602 3.9971 0.947879 3.96717 0.846733 3.95705C0.745587 3.94694 0.643433 3.95683 0.546135 3.98617C0.350467 4.04581 0.186563 4.18044 0.0904514 4.36048C-0.00566034 4.54052 -0.0261148 4.75122 0.0335841 4.94629L0.978792 8.04598C1.03755 8.23701 1.16858 8.39777 1.34414 8.49424C1.5197 8.5907 1.72604 8.6153 1.91948 8.56284L4.96766 7.73346C5.0658 7.70686 5.15769 7.66119 5.23807 7.59908C5.31844 7.53697 5.38571 7.45964 5.436 7.37154C5.48629 7.28344 5.51862 7.18629 5.53112 7.0857C5.54362 6.9851 5.53605 6.88304 5.50885 6.78536C5.4549 6.58882 5.32492 6.42164 5.14743 6.32051C4.96994 6.21938 4.75944 6.19257 4.56214 6.24596L3.17825 6.6246C4.50873 3.5706 7.54452 1.53858 10.9675 1.53858C15.6676 1.53858 19.4563 5.31664 19.4563 9.99925C19.4563 14.6819 15.6676 18.4614 10.9675 18.4614C7.11303 18.4614 3.74602 15.8863 2.75614 12.1749C2.73006 12.0772 2.68492 11.9856 2.62329 11.9053C2.56166 11.825 2.48475 11.7576 2.39696 11.7069C2.30918 11.6563 2.21224 11.6233 2.11168 11.6101C2.01113 11.5968 1.90893 11.6034 1.81093 11.6295C1.61396 11.682 1.44585 11.8101 1.34332 11.9858C1.24079 12.1615 1.21217 12.3704 1.26371 12.567C2.4315 16.9456 6.4209 20 10.9675 20C16.5016 20 21 15.5136 21 9.99925C21 4.48487 16.5016 2.90755e-06 10.9675 0ZM10.4595 4.82608C10.2558 4.82688 10.0608 4.90786 9.91674 5.0514C9.77273 5.19493 9.69147 5.38938 9.69068 5.59237V11.2599C9.69015 11.3957 9.72572 11.5293 9.79377 11.647C9.86182 11.7647 9.95992 11.8623 10.0781 11.93L13.6961 13.9809C13.7844 14.031 13.8817 14.0632 13.9825 14.0757C14.0832 14.0883 14.1855 14.0808 14.2834 14.0539C14.3813 14.027 14.4729 13.981 14.5529 13.9187C14.633 13.8565 14.6999 13.779 14.7499 13.6909C14.8001 13.603 14.8324 13.506 14.845 13.4055C14.8576 13.3051 14.8501 13.2032 14.8231 13.1056C14.7961 13.008 14.75 12.9167 14.6875 12.837C14.625 12.7572 14.5473 12.6905 14.4589 12.6407L11.2344 10.8121V5.59237C11.234 5.49134 11.2136 5.39138 11.1745 5.2982C11.1353 5.20502 11.0781 5.12043 11.0062 5.04928C10.9342 4.97812 10.8489 4.92179 10.7551 4.88349C10.6613 4.8452 10.5609 4.82569 10.4595 4.82608Z" fill="#1439BB" />
            </Svg>
        },
    ]
    return (
        <View style={style.tabbar}>
            {state.routes.map((route: any, index: any) => {
                let menu: any = Menus.find((a) => a.key == route.name);
                const { options } = descriptors[route.key];
                const label = menu?.name != null ? menu.name :
                    options.tabBarLabel !== undefined
                        ? options.tabBarLabel
                        : options.title !== undefined
                            ? options.title
                            : route.name;

                const isFocused = state.index === index;

                const onPress = () => {
                    const event = navigation.emit({
                        type: 'tabPress',
                        target: route.key,
                        canPreventDefault: true,
                    });

                    if (!isFocused && !event.defaultPrevented) {
                        navigation.navigate(route?.name, route?.params);
                    }
                };

                const onLongPress = () => {
                    navigation.emit({
                        type: 'tabLongPress',
                        target: route.key,
                    });
                };
                const widthAnim = useRef(new Animated.Value(isFocused ? 70 : 0)).current;

                useEffect(() => {
                  Animated.timing(widthAnim, {
                    toValue: isFocused ? 70 : 0, 
                    duration: 200,
                    useNativeDriver: false, 
                  }).start();
                }, [isFocused]);

                return (
                    <Pressable key={menu?.name}
                        accessibilityRole="button"
                        accessibilityState={isFocused ? { selected: true } : {}}
                        accessibilityLabel={options.tabBarAccessibilityLabel}
                        testID={options.tabBarTestID}
                        onPress={onPress}
                        onLongPress={onLongPress}
                        style={style.tabbutton}
                    >
                        <View style={style?.tabItem}>
                        <Animated.Text style={[style.topBorder, { width: widthAnim }]} />
                        <View style={{ marginBottom: 4 }}>
                                    {isFocused ? menu?.icon : menu?.active}
                                </View>
                                <Text role="tab" style={{ ...isFocused ? style?.activeText : '', ...{ fontSize: 12, fontFamily:'GilroyMedium'} }}> {label}</Text>
                        </View>
                    </Pressable>
                );
            })}
        </View>
    )
}



const style = StyleSheet.create({
    tabbar: {
        position: "absolute",
        bottom: 0,
        display: 'flex',
        flexDirection: 'row',
        width: '100%',
        height: 68,
        alignItems: 'center',
        shadowColor: '#000',
        shadowOpacity: 0.1,
        shadowOffset: { width: 0, height: -4 },
        shadowRadius: 4,
        elevation: 4,
        backgroundColor: "#FFFFFF",

    },
    tabbutton: {
        flex: 1,
        height: '100%',
        paddingLeft: 20,
        paddingRight: 20,
    },
    tabItem: {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        flexDirection: 'column',
        height: '100%',
        position:'relative'
    },
    activeText: {
        color: '#1439BB'
    },
    activeBorder: {
        width:70,
    },
    items: {
        width:0,
    },
    topBorder:{
        position:"absolute",
        height:4,
        backgroundColor:'#1439BB',
        top:0,
        display:'flex',
        justifyContent:'center',
    }
})


